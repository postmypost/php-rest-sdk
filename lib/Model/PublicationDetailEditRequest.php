<?php
/**
 * PublicationDetailEditRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Postmypost\RestSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Postmypost REST API
 *
 * Official OpenAPI specification for the Postmypost social media management (SMM) API.  Postmypost is a secure, reliable, and highly trusted social media management platform, recommended by thousands of SMM professionals and agencies. All integrations are built exclusively on official APIs, ensuring maximum security, compliance, and no risk of account blocking or bans.  With the Postmypost API, you can automate social media marketing, content scheduling, publishing, analytics, and workflow management across all major platforms, including Instagram, Facebook, Twitter, Threads, Bluesky, LinkedIn, Pinterest, YouTube, Rutube, TikTok, Discord, Reddit, VKontakte, Telegram, Viber, Odnoklassniki, Bitrix, Medium, Tumblr, Mastodon, and Webhook.  Why choose Postmypost? - 100% official and secure integrations with social networks - No risk of account blocking â€” all APIs are fully compliant - Trusted by thousands of businesses, agencies, and SMM professionals - Powerful automation, scheduling, and analytics tools - Friendly support and clear documentation  For agencies, businesses, and creators looking for the safest, most reliable way to automate and scale their social media presence, Postmypost is the recommended choice.
 *
 * The version of the OpenAPI document: 4.1.0
 * Contact: support@postmypost.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Postmypost\RestSdk\Model;

use \ArrayAccess;
use \Postmypost\RestSdk\ObjectSerializer;

/**
 * PublicationDetailEditRequest Class Doc Comment
 *
 * @category Class
 * @description Parameters for creating or updating publication details
 * @package  Postmypost\RestSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PublicationDetailEditRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PublicationDetailEditRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'int',
        'publication_type' => '\Postmypost\RestSdk\Model\PublicationDetailPublicationTypeEnum',
        'content' => 'string',
        'comment' => 'string',
        'link' => 'string',
        'title' => 'string',
        'tiktok_comment' => 'bool',
        'tiktok_duet' => 'bool',
        'tiktok_stitch' => 'bool',
        'tiktok_privacy_status' => '\Postmypost\RestSdk\Model\PublicationDetailTikTokPrivacyStatusEnum',
        'youtube_privacy_status' => '\Postmypost\RestSdk\Model\PublicationDetailYouTubePrivacyStatusEnum',
        'file_ids' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => null,
        'publication_type' => null,
        'content' => null,
        'comment' => null,
        'link' => null,
        'title' => null,
        'tiktok_comment' => null,
        'tiktok_duet' => null,
        'tiktok_stitch' => null,
        'tiktok_privacy_status' => null,
        'youtube_privacy_status' => null,
        'file_ids' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_id' => false,
        'publication_type' => false,
        'content' => false,
        'comment' => false,
        'link' => false,
        'title' => false,
        'tiktok_comment' => false,
        'tiktok_duet' => false,
        'tiktok_stitch' => false,
        'tiktok_privacy_status' => false,
        'youtube_privacy_status' => false,
        'file_ids' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'account_id',
        'publication_type' => 'publication_type',
        'content' => 'content',
        'comment' => 'comment',
        'link' => 'link',
        'title' => 'title',
        'tiktok_comment' => 'tiktok_comment',
        'tiktok_duet' => 'tiktok_duet',
        'tiktok_stitch' => 'tiktok_stitch',
        'tiktok_privacy_status' => 'tiktok_privacy_status',
        'youtube_privacy_status' => 'youtube_privacy_status',
        'file_ids' => 'file_ids'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'publication_type' => 'setPublicationType',
        'content' => 'setContent',
        'comment' => 'setComment',
        'link' => 'setLink',
        'title' => 'setTitle',
        'tiktok_comment' => 'setTiktokComment',
        'tiktok_duet' => 'setTiktokDuet',
        'tiktok_stitch' => 'setTiktokStitch',
        'tiktok_privacy_status' => 'setTiktokPrivacyStatus',
        'youtube_privacy_status' => 'setYoutubePrivacyStatus',
        'file_ids' => 'setFileIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'publication_type' => 'getPublicationType',
        'content' => 'getContent',
        'comment' => 'getComment',
        'link' => 'getLink',
        'title' => 'getTitle',
        'tiktok_comment' => 'getTiktokComment',
        'tiktok_duet' => 'getTiktokDuet',
        'tiktok_stitch' => 'getTiktokStitch',
        'tiktok_privacy_status' => 'getTiktokPrivacyStatus',
        'youtube_privacy_status' => 'getYoutubePrivacyStatus',
        'file_ids' => 'getFileIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('publication_type', $data ?? [], null);
        $this->setIfExists('content', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('link', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('tiktok_comment', $data ?? [], null);
        $this->setIfExists('tiktok_duet', $data ?? [], null);
        $this->setIfExists('tiktok_stitch', $data ?? [], null);
        $this->setIfExists('tiktok_privacy_status', $data ?? [], null);
        $this->setIfExists('youtube_privacy_status', $data ?? [], null);
        $this->setIfExists('file_ids', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['publication_type'] === null) {
            $invalidProperties[] = "'publication_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id Account ID
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets publication_type
     *
     * @return \Postmypost\RestSdk\Model\PublicationDetailPublicationTypeEnum
     */
    public function getPublicationType()
    {
        return $this->container['publication_type'];
    }

    /**
     * Sets publication_type
     *
     * @param \Postmypost\RestSdk\Model\PublicationDetailPublicationTypeEnum $publication_type publication_type
     *
     * @return self
     */
    public function setPublicationType($publication_type)
    {
        if (is_null($publication_type)) {
            throw new \InvalidArgumentException('non-nullable publication_type cannot be null');
        }
        $this->container['publication_type'] = $publication_type;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string|null
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string|null $content Publication text
     *
     * @return self
     */
    public function setContent($content)
    {
        if (is_null($content)) {
            throw new \InvalidArgumentException('non-nullable content cannot be null');
        }
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment First comment on the publication
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets link
     *
     * @return string|null
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param string|null $link External link for the publication
     *
     * @return self
     */
    public function setLink($link)
    {
        if (is_null($link)) {
            throw new \InvalidArgumentException('non-nullable link cannot be null');
        }
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Publication title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets tiktok_comment
     *
     * @return bool|null
     */
    public function getTiktokComment()
    {
        return $this->container['tiktok_comment'];
    }

    /**
     * Sets tiktok_comment
     *
     * @param bool|null $tiktok_comment Allow comments on TikTok
     *
     * @return self
     */
    public function setTiktokComment($tiktok_comment)
    {
        if (is_null($tiktok_comment)) {
            throw new \InvalidArgumentException('non-nullable tiktok_comment cannot be null');
        }
        $this->container['tiktok_comment'] = $tiktok_comment;

        return $this;
    }

    /**
     * Gets tiktok_duet
     *
     * @return bool|null
     */
    public function getTiktokDuet()
    {
        return $this->container['tiktok_duet'];
    }

    /**
     * Sets tiktok_duet
     *
     * @param bool|null $tiktok_duet Allow duets on TikTok
     *
     * @return self
     */
    public function setTiktokDuet($tiktok_duet)
    {
        if (is_null($tiktok_duet)) {
            throw new \InvalidArgumentException('non-nullable tiktok_duet cannot be null');
        }
        $this->container['tiktok_duet'] = $tiktok_duet;

        return $this;
    }

    /**
     * Gets tiktok_stitch
     *
     * @return bool|null
     */
    public function getTiktokStitch()
    {
        return $this->container['tiktok_stitch'];
    }

    /**
     * Sets tiktok_stitch
     *
     * @param bool|null $tiktok_stitch Allow stitch on TikTok
     *
     * @return self
     */
    public function setTiktokStitch($tiktok_stitch)
    {
        if (is_null($tiktok_stitch)) {
            throw new \InvalidArgumentException('non-nullable tiktok_stitch cannot be null');
        }
        $this->container['tiktok_stitch'] = $tiktok_stitch;

        return $this;
    }

    /**
     * Gets tiktok_privacy_status
     *
     * @return \Postmypost\RestSdk\Model\PublicationDetailTikTokPrivacyStatusEnum|null
     */
    public function getTiktokPrivacyStatus()
    {
        return $this->container['tiktok_privacy_status'];
    }

    /**
     * Sets tiktok_privacy_status
     *
     * @param \Postmypost\RestSdk\Model\PublicationDetailTikTokPrivacyStatusEnum|null $tiktok_privacy_status tiktok_privacy_status
     *
     * @return self
     */
    public function setTiktokPrivacyStatus($tiktok_privacy_status)
    {
        if (is_null($tiktok_privacy_status)) {
            throw new \InvalidArgumentException('non-nullable tiktok_privacy_status cannot be null');
        }
        $this->container['tiktok_privacy_status'] = $tiktok_privacy_status;

        return $this;
    }

    /**
     * Gets youtube_privacy_status
     *
     * @return \Postmypost\RestSdk\Model\PublicationDetailYouTubePrivacyStatusEnum|null
     */
    public function getYoutubePrivacyStatus()
    {
        return $this->container['youtube_privacy_status'];
    }

    /**
     * Sets youtube_privacy_status
     *
     * @param \Postmypost\RestSdk\Model\PublicationDetailYouTubePrivacyStatusEnum|null $youtube_privacy_status youtube_privacy_status
     *
     * @return self
     */
    public function setYoutubePrivacyStatus($youtube_privacy_status)
    {
        if (is_null($youtube_privacy_status)) {
            throw new \InvalidArgumentException('non-nullable youtube_privacy_status cannot be null');
        }
        $this->container['youtube_privacy_status'] = $youtube_privacy_status;

        return $this;
    }

    /**
     * Gets file_ids
     *
     * @return int[]|null
     */
    public function getFileIds()
    {
        return $this->container['file_ids'];
    }

    /**
     * Sets file_ids
     *
     * @param int[]|null $file_ids File IDs
     *
     * @return self
     */
    public function setFileIds($file_ids)
    {
        if (is_null($file_ids)) {
            throw new \InvalidArgumentException('non-nullable file_ids cannot be null');
        }
        $this->container['file_ids'] = $file_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


